Ajax의 요소들
 - url : 요청 url
 - type : 요청 방식 (get, post, put, delete)
 - async : 동기, 비동기 지정(booelan) default값 true(비동기)
 - data : 전달할 파라미터
 - dataType : 서버에서 반환되는 데이터 형식 (text, html, xml, json, jsonp, script)
    > xml = XML 문서
    > html = html을 텍스트 데이터로
    > script = JavaScript 코드를 텍스트 데이터로
    > json = JSON 형식 데이터로 평가하고 JavaScript의 개체로 변환
    > jsonp = JSONP로 요청을 부르고 callback 매개 변수에 지정된 함수 회수 갑슬 JSON 데이터로 처리한다. (JQuery 1.2 추가)
    > text = 일반 텍스트
 - success : ajax 요청 성공시 실행할 이벤트 지정 (function, array)
 - error(xhr, status, error) : ajax 요청 실패 시 실행할 이벤트 지정(function)
 - complete : ajax 요청 완료시 실행할 이벤트 지정(function)

 Ajax 프레임 워크
  - Ajax를 이용하여 개발을 손 쉽게 할 수 있도록 미리 여러가지 기능을 포함해 놓은 개발환경
  - 종류 : Prototype, script.aculo.us, dojo, ***JQuery*** (주로 쓸거)

동기와 비동기 방식

- 동기(sync) : 요청 후 응답을 받아야지만 다음 동작이 이루어지는 동작 방식
   > 요청을 하면 시간이 얼마나 걸리던지 요청한 자리에서 결과가 주어져야 한다.
   > 요청을 하고 결과를 받는 동안 사용자는 다른 프로그램들을 동작시키지 못한다.
   > 한 개의 데이터 요청에 대한 서버의 응답이 이루어 질 때까지 계속 대기해야만한다.

- 비동기(async) : 요청을 보낸 후 응답과는 상관없이 동작하는 방식
   > 요청한 결과는 동시에 일어나지 않을거라는 약속
   > 서버에게 데이터를 요청을 하더라고 응답을 계속 기다리지 않아도 된다
   > 그 사이 다른 외부 활동을 수행해도 되고 다른 요청을 보내도 된다.

장단점

 - 동기
   > 장점 : 설계가 매우 간단하고 직관적이다.
   > 단점 : 결과가 주어질 때까지 아무것도 못하고 대기해야 된다.

 _ 비동기
   > 장점 : 요청에 따른 결과가 반환되는 시간 동안 다른 작업을 수행 할 수 있다.
   > 단점 : 동기식보다 설계가 복잡하다.
              디버깅이 어려울 수 있다.
